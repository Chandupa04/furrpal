import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_tindercard/flutter_tindercard.dart';

// void main() {
//   runApp(const DogMatchmakingApp());
// }

// class DogMatchmakingApp extends StatelessWidget {
//   const DogMatchmakingApp({super.key});

//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       debugShowCheckedModeBanner: false,
//       theme: ThemeData(
//         fontFamily: GoogleFonts.poppins().fontFamily,
//       ),
//       home: const MatchmakingScreen(),
//     );
//   }
// }

class MatchmakingScreen extends StatefulWidget {
  const MatchmakingScreen({super.key});

  @override
  _MatchmakingScreenState createState() => _MatchmakingScreenState();
}

class _MatchmakingScreenState extends State<MatchmakingScreen> {
  List<Map<String, dynamic>> dogs = [
    {
      "name": "Rocky",
      "breed": "German Shepherd",
      "age": "4 years",
      "gender": "Male",
      "location": "Kandy",
      "image": "assets/images/german_shepherd.jpg"
    },
    {
      "name": "Bella",
      "breed": "Golden Retriever",
      "age": "3 years",
      "gender": "Female",
      "location": "Colombo",
      "image": "assets/images/golden_retriever.jpg"
    },
    {
      "name": "Cooper",
      "breed": "Labrador",
      "age": "2 years",
      "gender": "Male",
      "location": "New York",
      "image": "assets/images/labrador.jpg"
    }
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 242, 241, 240),
      appBar: AppBar(
        title: const Text("Dog Matchmaking"),
      ),
      body: dogs.isEmpty
          ? const Center(child: CircularProgressIndicator()) // Show loading if no dogs
          : Center(
              child: TinderSwapCard(
                totalNum: dogs.length,
                stackNum: 3,
                swipeEdge: 4.0,
                maxWidth: MediaQuery.of(context).size.width * 0.9,
                maxHeight: MediaQuery.of(context).size.height * 0.65,
                minWidth: MediaQuery.of(context).size.width * 0.8,
                minHeight: MediaQuery.of(context).size.height * 0.60,
                cardBuilder: (context, index) {
                  return DogProfileCard(dog: dogs[index]);
                },
                swipeCompleteCallback: (CardSwipeOrientation orientation, int index) {
                  if (orientation == CardSwipeOrientation.LEFT) {
                    print("${dogs[index]['name']} Disliked ❌");
                  } else if (orientation == CardSwipeOrientation.RIGHT) {
                    print("${dogs[index]['name']} Liked ❤️");
                  }
                },
              ),
            ),
      bottomNavigationBar: _buildBottomNavigation(),
    );
  }

  Widget _buildBottomNavigation() {
    return BottomNavigationBar(
      backgroundColor: Colors.white.withOpacity(0.95),
      selectedItemColor: Colors.orange.shade800,
      unselectedItemColor: Colors.grey,
      currentIndex: 0,
      selectedFontSize: 14,
      unselectedFontSize: 12,
      iconSize: 28,
      showSelectedLabels: true,
      showUnselectedLabels: true,
      items: const [
        BottomNavigationBarItem(icon: Icon(Icons.home), label: "Home"),
        BottomNavigationBarItem(icon: Icon(Icons.notifications), label: "Alerts"),
        BottomNavigationBarItem(icon: Icon(Icons.add), label: "Add"),
        BottomNavigationBarItem(icon: Icon(Icons.group), label: "Community"),
        BottomNavigationBarItem(icon: Icon(Icons.store), label: "Shop"),
      ],
    );
  }
}

class DogProfileCard extends StatelessWidget {
  final Map<String, dynamic> dog;
  const DogProfileCard({super.key, required this.dog});

  @override
  Widget build(BuildContext context) {
    return Stack(
      alignment: Alignment.bottomCenter,
      children: [
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(25),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.12),
                blurRadius: 20,
                spreadRadius: 5,
                offset: const Offset(0, 10),
              ),
            ],
          ),
          child: Column(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(20),
                child: Image.asset(dog["image"], height: 300, fit: BoxFit.cover, width: double.infinity),
              ),
              const SizedBox(height: 15),
              Text(dog["name"], style: const TextStyle(fontSize: 26, fontWeight: FontWeight.bold)),
              Text(dog["breed"], style: const TextStyle(fontSize: 18, fontStyle: FontStyle.italic, color: Colors.brown)),
              const SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  _infoPill("Age", dog["age"]),
                  _infoPill("Gender", dog["gender"]),
                  _infoPill("Location", dog["location"]),
                ],
              ),
            ],
          ),
        ),
        _buildFloatingButtons(context),
      ],
    );
  }

  Widget _infoPill(String title, String value) {
    return Column(
      children: [
        Text(title, style: const TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
        Container(
          margin: const EdgeInsets.only(top: 5),
          padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 8),
          decoration: BoxDecoration(
            color: const Color.fromARGB(255, 183, 215, 172),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Text(value, style: const TextStyle(fontSize: 14)),
        ),
      ],
    );
  }

  Widget _buildFloatingButtons(BuildContext context) {
    return Positioned(
      bottom: 25,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          _glassButton(icon: Icons.close, color: Colors.redAccent, onTap: () {}),
          const SizedBox(width: 30),
          _glassButton(icon: Icons.favorite, color: Colors.green, onTap: () {}),
        ],
      ),
    );
  }

  Widget _glassButton({required IconData icon, required Color color, required VoidCallback onTap}) {
    return GestureDetector(
      onTapDown: (_) => HapticFeedback.mediumImpact(),
      onTap: () {
        onTap();
      },
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 150),
        curve: Curves.easeInOut,
        width: 70,
        height: 70,
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.4),
          shape: BoxShape.circle,
          boxShadow: [
            BoxShadow(
              color: color.withOpacity(0.5),
              blurRadius: 12,
              spreadRadius: 3,
            ),
          ],
        ),
        child: Center(
          child: Icon(icon, size: 32, color: color),
        ),
      ),
    );
  }
}
